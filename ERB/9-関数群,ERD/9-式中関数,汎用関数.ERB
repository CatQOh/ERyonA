;;;式中関数「LOOPRES(LOOP RESULT)」
;;;DO～LOOP構文の記述を簡略化するための関数
;;;引数で指定された数字とRESULTを参照し、一致していれば0を返す(つまりLOOPを抜ける)
;;;現在同時に指定できるのは10個まで
@LOOPRES, ARG:0 = __INT_MAX__, ARG:1 = __INT_MAX__, ARG:2 = __INT_MAX__, ARG:3 = __INT_MAX__, ARG:4 = __INT_MAX__, ARG:5 = __INT_MAX__, ARG:6 = __INT_MAX__, ARG:7 = __INT_MAX__, ARG:8 = __INT_MAX__, ARG:9 = __INT_MAX__
#FUNCTION
SIF MATCH(ARG, RESULT)
	RETURNF 0

RETURNF 1

;;;DO
;;;	INPUT
;;;LOOP LOOPRES(XX, XX, XX)
;;;を一行でやる関数 単純な選択肢などに使える
@INPUTF, 数値:0 = __INT_MAX__, 数値:1 = __INT_MAX__,数値:2 = __INT_MAX__,数値:3 = __INT_MAX__,数値:4 = __INT_MAX__,数値:5 = __INT_MAX__,数値:6 = __INT_MAX__,数値:7 = __INT_MAX__,数値:8 = __INT_MAX__,数値:9 = __INT_MAX__,
#DIM DYNAMIC 数値, 10
DO
	INPUT
LOOP LOOPRES(数値:0, 数値:1, 数値:2, 数値:3, 数値:4, 数値:5, 数値:6, 数値:7, 数値:8, 数値:9)

RETURN RESULT

;;;現在表示してる最後の行がDRAWLINE行かどうかをチェックし、そうでなければDRAWLINEを引く関数
@CHECKDRAWLINE
SIF HTML_TOPLAINTEXT(HTML_GETPRINTEDSTR(0)) != DRAWLINESTR
	DRAWLINE

;;;上記CHECKDRAWLINEのWAIT付き版
@CHECKDRAWLINEW
IF HTML_TOPLAINTEXT(HTML_GETPRINTEDSTR(0)) != DRAWLINESTR
	WAIT
	DRAWLINE
ENDIF

;;;eraBEMANIのMANUALPRINT タグを解析してPRINTする
@PRINTEXT, 行:0
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 検索位置
#DIMS DYNAMIC 行, 2
#DIM DYNAMIC 始点
#DIM DYNAMIC 文字数
#DIMS DYNAMIC 字体, 3
#DIMS DYNAMIC 本文

;タグを探す
始点 = STRFINDU(行, "(", 検索位置)
文字数 = STRFINDU(行, ")", 検索位置)-始点
;タグ付けされてれば処理実行
IF 始点 >= 0
	;タグ付けまでの文章を通常表示
	PRINTFORM %SUBSTRINGU(行, 0, 始点)%
	;処理、内容、本文でSPLITする
	SPLIT SUBSTRINGU(行, 始点+1, 文字数-1), ":", 字体
	本文 = %字体:2%
	;字体:0 = 特殊処理の種類 字体:1 = 特殊処理の内容 本文 = 本文
	;必要に応じて追加するとよい
	SELECTCASE 字体:0
		;フォント変更系
		CASE "FONT"
			SELECTCASE 字体:1
				;太字
				CASE "BOLD"
					FONTBOLD
					CALL PRINTEXT, 本文
					FONTREGULAR
				;打ち消し線
				CASE "STRIKE"
					FONTSTYLE 4
					CALL PRINTEXT, 本文
					FONTSTYLE 0
			ENDSELECT
		;色指定 現時点では色名のみで数値指定はできない
		;指定した色名が無効であればデフォルト色表示
		CASE "COLOR"
			IF COLOR_FROMNAME(字体:1) == -1
				CALL PRINTEXT, 本文
			ELSE
				SETCOLOR COLOR_FROMNAME(字体:1)
				CALL PRINTEXT, 本文
				RESETCOLOR
			ENDIF
		;その他
		CASE "OTHER"
			SELECTCASE 字体:1
				;反転タ ALIGHNMENT命令の仕様上、タグ重複使用は不可能
				CASE "REVERSE"
					行:1 =
					FOR LCOUNT, STRLENSU(本文), -1, -1
						SELECTCASE CHARATU(本文, LCOUNT)
							CASE "【"
								行:1 += "】"
							CASE "】"
								行:1 += "【"
							CASE "「"
								行:1 += "」"
							CASE "」"
								行:1 += "「"
							CASE "["
								行:1 += "]"
							CASE "]"
								行:1 += "["
							CASE "（"
								行:1 += "）"
							CASE "）"
								行:1 += "（"
							CASEELSE
								行:1 += CHARATU(本文, LCOUNT)
						ENDSELECT
					NEXT
					ALIGNMENT RIGHT
					PRINTFORML %行:1%
					ALIGNMENT LEFT
				;WAIT このタグを使用すると改行されるので、文末までタグに含めないと表示がおかしくなる
				CASE "WAIT"
					CALL PRINTEXT, 本文
					WAIT
			ENDSELECT
	ENDSELECT
	;次の始動位置をタグ終了後の次の文字に設定
	検索位置 = STRFINDU(行, 本文)+STRLENSU(本文)
	IF 検索位置 < STRLENSU(行)
		;残りの文章が閉じカッコならループ終了
		IF 検索位置+1 == STRLENSU(行) && CHARATU(行, 検索位置) == ")"
			RETURN
		;残りの文章が閉じカッコ以外にもあれば再帰処理
		ELSE
			;閉じカッコの分+1
			CALL PRINTEXT, SUBSTRINGU(行, 検索位置+1)
			RETURN
		ENDIF
	ENDIF
;タグが無ければ通常表示
ELSE
	PRINTFORM %行%
	RETURN
ENDIF

;;;PRINTEXTを平文にしてSUBSTRINGする タグ入れ子には非対応
@TAGSTRLENS, 行
#FUNCTION

#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 検索位置
#DIMS DYNAMIC 行, 2
#DIM DYNAMIC 始点
#DIM DYNAMIC 文字数
#DIMS DYNAMIC 字体, 3
#DIMS DYNAMIC 本文
#DIMS DYNAMIC 平文

;タグを探す
DO
	始点 = STRFINDU(行, "(", 検索位置)
	文字数 = STRFINDU(行, ")", 検索位置)-始点
	;タグ付けされてれば処理実行
	IF 始点 >= 0
		;タグ付けまでの文章
		平文 += SUBSTRINGU(行, 検索位置, 始点-検索位置)
		;処理、内容、本文でSPLITする
		SPLIT SUBSTRINGU(行, 始点+1, 文字数-1), ":", 字体
		本文 = %字体:2%
		平文 += 字体:2
		;DEBUGPRINTFORML %平文%
		;次の始動位置をタグ終了後の次の文字に設定
		検索位置 = STRFINDU(行, 本文)+STRLENSU(本文)
		IF 検索位置 < STRLENSU(行)
			;残りの文章が閉じカッコならループ終了
			IF 検索位置+1 == STRLENSU(行) && CHARATU(行, 検索位置) == ")"
				RETURNF STRLENS(平文)
			;残りの文章が閉じカッコ以外にもあればループ
			ELSE
				;閉じカッコの分+1
				検索位置++
				CONTINUE
			ENDIF
		ENDIF
	ELSE
		平文 += SUBSTRINGU(行, 検索位置, STRLENSU(行))
		;DEBUGPRINTFORML %平文%
		RETURNF STRLENS(平文)
	ENDIF
LOOP 1

@COLUMNLINE, LINE, 文字数
#DIM DYNAMIC LINE
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 文字数

CALL PRINTEXT, カラム行:LINE

FOR LCOUNT, 0, 文字数-TAGSTRLENS(カラム行:LINE)
	PRINT  
NEXT

;;;ループやRESTART時に同じ物を表示しないようにCLEARLINEする関数
@LOOP_CLEARLINE
IF VARLINE > 0
	CLEARLINE LINECOUNT-VARLINE
	CALL GDISPOSEALL
ENDIF
VARLINE = LINECOUNT

;;;キャラの最大HP
@MAXHP, 対象
#FUNCTION
#DIM DYNAMIC 対象

RETURNF 10+ステータス:対象:レベル+(ステータス:対象:耐久*2)

;;;キャラの最大MP
@MAXMP, 対象
#FUNCTION
#DIM DYNAMIC 対象

RETURNF 5+(ステータス:対象:レベル/2)+ステータス:対象:知性

;;;キャラの最大VP
@MAXVP, 対象
#FUNCTION
#DIM DYNAMIC 対象

RETURNF 5+(ステータス:対象:レベル/2)

;;;上記SPACESとSTRLENSを組み合わせたもの
@SPACESLENS, 文字列
#FUNCTIONS
#DIMS DYNAMIC 文字列
#DIM DYNAMIC LCOUNT
#DIMS DYNAMIC SPACE

FOR LCOUNT, 0, STRLENS(文字列)
	SPACE += " "
NEXT

RETURNF SPACE

;;;条件がtrueだった場合は文字列を、falseなら文字数分の空白を返す
@RETURNSPACE, 条件, 文字列
#FUNCTIONS
#DIM DYNAMIC 条件
#DIMS DYNAMIC 文字列
IF 条件
	RETURNF 文字列
ELSE
	RETURNF SPACESLENS(文字列)
ENDIF

@ステータス表示, 対象, ボタン
#DIM DYNAMIC 対象
#DIM DYNAMIC LCOUNT
#DIMS DYNAMIC ボタン

IF CSTR:対象:顔グラ != ""
	CALL COLUMNIMG, 0, @"%CSTR:対象:顔グラ%", 400, 400
ELSE
	CALL COLUMNIMG, 0, "NO_IMAGE", 400, 400
ENDIF
CALL COLUMNPRINT, 0, @" 名前:%NAME:対象% レベル:{ステータス:対象:レベル} 職業:%CSTR:対象:職業% "
CALL COLUMNPRINT, 0, @"HP:{ステータス:対象:HP}/{MAXHP(対象)} ", "lime"
CALL COLUMNPRINT, 0, @"MP:{ステータス:対象:MP}/{MAXMP(対象)} ", "deepskyblue"
CALL COLUMNPRINT, 0, @"VP:{ステータス:対象:VP}/{MAXVP(対象)} ", "yellow"
CALL COLUMNPRINTL, 0, ボタン
FOR LCOUNT, 0, 6, 2
	CALL COLUMNPRINTL, 0, @"　　　　 %ERDNAME(ステータス, LCOUNT)%%"■"*ステータス:対象:LCOUNT%%"□"*(20-ステータス:対象:LCOUNT)% {ステータス:対象:LCOUNT} %ERDNAME(ステータス, (LCOUNT+1))%%"■"*ステータス:対象:(LCOUNT+1)%%"□"*(20-ステータス:対象:(LCOUNT+1))% {ステータス:対象:(LCOUNT+1)}"
NEXT

@GCREATESTACK, ARGS
GCREATEFROMFILE GCOUNT, ARGS
SPRITECREATE ARGS, GCOUNT
GCOUNT++

@GDISPOSEALL
#DIM DYNAMIC LCOUNT

FOR LCOUNT, 0, GCOUNT
	GDISPOSE LCOUNT
NEXT

@死亡人数, ARG
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 人数

FOR LCOUNT, 1, CHARANUM
	SIF ステータス:LCOUNT:未加入
		CONTINUE
	SIF ステータス:LCOUNT:VP == 0
		人数++
NEXT

RETURNF 人数

@生存者数, ARG
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 人数

FOR LCOUNT, 1, CHARANUM
	SIF ステータス:LCOUNT:未加入
		CONTINUE
	SIF ステータス:LCOUNT:行方不明
		CONTINUE
	SIF ステータス:LCOUNT:VP
		人数++
NEXT

RETURNF 人数

@キャラ総数
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 人数

FOR LCOUNT, 1, CHARANUM
	SIF ステータス:LCOUNT:未加入
		CONTINUE
	人数++
NEXT

RETURNF 人数

@部隊人数, PID
#FUNCTION
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 人数
#DIM DYNAMIC PID

FOR LCOUNT, 0, 3
	SIF 部隊メンバー:PID:LCOUNT != 0
		人数++
NEXT

RETURNF 人数

;;;回復可能な状態異常をすべて回復
@状態異常回復, 対象
#DIM DYNAMIC 対象
#DIM DYNAMIC LCOUNT

FOR LCOUNT, 0, VARSIZE("状態異常")
	SELECTCASE ERDNAME(状態異常, LCOUNT)
		{
		CASE "出血", "火傷", "パニック", "窒息", "首拘束", "腕拘束", "足拘束",
			 "失神", "放心", "恐怖", "傀儡", "麻痺", "毒", "冷凍", "石化"
		}
			状態異常:対象:LCOUNT = 0
	ENDSELECT
NEXT

;;;部隊メンバーを横並びで表示
@部隊メンバー表示, 部隊ID
#DIM DYNAMIC 部隊ID
#DIM DYNAMIC LCOUNT
#DIM DYNAMIC 対象
#DIM DYNAMIC 行, 3
#DIM CONST 顔グラサイズ = 6

FOR LCOUNT, 0, 3
	SIF !部隊メンバー:部隊ID:LCOUNT
		CONTINUE
	対象 = GETCHARA(部隊メンバー:部隊ID:LCOUNT)
	CALL COLUMNCREATE, LCOUNT+1
	CALL COLUMNRESIZE, LCOUNT+1, 2000, 顔グラサイズ*100
	CALL COLUMNMOVE, LCOUNT+1, LCOUNT*2000, 0
	CALL COLUMNIMG, LCOUNT+1, @"%CSTR:対象:顔グラ%", 顔グラサイズ*100, 顔グラサイズ*100
	CALL COLUMNPRINTL, LCOUNT+1, @" [{LCOUNT}] 名前:%NAME:対象, 10, LEFT%"
	CALL COLUMNPRINTL, LCOUNT+1, @"%"　"*顔グラサイズ% レベル:{ステータス:対象:レベル, 2, LEFT}"
	CALL COLUMNPRINTL, LCOUNT+1, @"%"　"*顔グラサイズ% 職業:%CSTR:対象:職業, 16, LEFT%"
	CALL COLUMNPRINT, LCOUNT+1, @"%"　"*顔グラサイズ% HP:{ステータス:対象:HP, 2}/{MAXHP(対象), 2, LEFT} ", "lime"
	CALL COLUMNPRINT, LCOUNT+1, @"MP:{ステータス:対象:MP, 2}/{MAXMP(対象), 2, LEFT} ", "deepskyblue"
	CALL COLUMNPRINTL, LCOUNT+1, @"VP:{ステータス:対象:VP, 2}/{MAXVP(対象), 2, LEFT} ", "yellow"
NEXT
FOR LCOUNT, 0, 顔グラサイズ
	CALL COLUMNPRINTL, 0, ""
NEXT

@キャラ詳細表示, 対象
#DIM DYNAMIC 対象
